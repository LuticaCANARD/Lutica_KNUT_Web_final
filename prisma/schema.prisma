// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma에 관한 설명 : 
// DB-스크립트 사이 어댑터
// npx prisma generate 를 사용하면 관계도를 생성해주며,
// npx prisma db push  를 사용하면 url로 연결된 db를 이 관계도로 바꿔준다.
// 굳이 MySQL이 아니어도 Mongo, PostgreSQL도 가능하다.

// 안씀.
generator client {
  provider = "prisma-client-js"
}

// 문서화용
generator erd {
  provider = "prisma-erd-generator-markdown"
  output   = "./ERD.md"
}

generator erd_svg {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

//DB컨택터.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL_DEV")
  relationMode = "prisma"
}

//세션용
model Session {
  sid    String @id
  expire String
  data   String
}

model User {
  // 사용자 정보
  id                 String         @id @default(uuid()) // 기본 키로 지정
  loginId            String
  password           String
  email              String
  createdAt          DateTime       @default(now())
  passwordErrorCount Int            @default(0)
  posts              Post[]
  schedule           UserSchedule[]
  pictures           Picture[]
  mainDesc           String @default("")// 설명
  mainProfilePicture        String?
  mainTitlePicture        String?

  @@map("user")
}

model Post {
  // 유저의 게시글
  id          Int           @id @default(autoincrement())
  user        User          @relation(references: [id], fields: [userId])
  userId      String // 작성자ID
  file        String? // 받을수있는파일
  desc        String? // 글내용
  location    String? //서브정보
  createdAt   DateTime      @default(now())
  PostPicture PostPicture[]
  @@index([userId])
}

model Picture {
  // 유저의 슬라이드.
  id        Int      @id @default(autoincrement())
  user      User     @relation(references: [id], fields: [userId])
  userId    String // 작성자ID
  createdAt DateTime @default(now())
  name      String
  path      String

  PostPicture PostPicture[]

  @@index([userId])
}

// Picture와 Post의 연결관계를 만듬.
model PostPicture {
  id        String   @id @default(uuid())
  post      Post?    @relation(references: [id], fields: [postId])
  picture   Picture? @relation(references: [id], fields: [pictureId])
  postId    Int?
  pictureId Int?
  @@index([postId]) // PostId를 LEFT로 해서 JOIN할경우 Key.
  @@index([pictureId])
}

model UserSchedule {
  // 유저가 현재 잡힌 일정
  id       Int      @id @default(autoincrement())
  user     User     @relation(references: [id], fields: [userId])
  userId   String // 작성자ID
  file     String? // 받을수있는파일
  desc     String? // 글내용
  location String? //서브정보
  date     DateTime // 날짜

  @@index([userId])
}

model Social{
  followerId String
  targetId String
  @@id([followerId,targetId])
}
